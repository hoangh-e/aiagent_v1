# db/mongodb.py

from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi
from sentence_transformers import SentenceTransformer
from config.settings import COLLECTION_THUOC_INFO, MODEL_VN_EMBEDDING
from services.crawler import (
    crawl_thuoc_items,
    crawl_nguyenlieu_items,
    crawl_taduoc_items
)
from services.crawler import crawl_thuoc_detail_items
# services/congdung.py
from smolagents import LiteLLMModel, DuckDuckGoSearchTool
from smolagents.agents import CodeAgent
from config.settings import MODEL_VN_EMBEDDING, COLLECTION_THUOC_CONGDUNG, GEMINI_API_KEY

class MongoDB:
    def __init__(self, uri: str):
        self.uri = uri
        self.client = None
        self.model_embedding = SentenceTransformer(MODEL_VN_EMBEDDING)

    def connect(self):
        try:
            self.client = MongoClient(self.uri, server_api=ServerApi('1'))
            self.client.admin.command('ping')
            print("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!")
        except Exception as e:
            print("‚ùå K·∫øt n·ªëi MongoDB th·∫•t b·∫°i:", e)
            self.client = None

    def disconnect(self):
        if self.client:
            self.client.close()
            print("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB")

    def get_collection(self, db_name: str, collection_name: str = COLLECTION_THUOC_INFO):
        if not self.client:
            print("‚ö†Ô∏è Ch∆∞a k·∫øt n·ªëi MongoDB.")
            return None
        return self.client[db_name][collection_name]

    def _prepare_and_insert(self, db_name: str, data: list, loai: str, collection_name: str = COLLECTION_THUOC_INFO):
        if not self.client:
            print("‚ö†Ô∏è Ch∆∞a k·∫øt n·ªëi MongoDB.")
            return

        for item in data:
            item["loai"] = loai
            text = item.get("fulltext", "")
            vector = self.model_embedding.encode(text)
            item["embedding"] = vector.tolist()

        collection = self.get_collection(db_name, collection_name)
        result = collection.insert_many(data)
        print(f"‚úÖ ƒê√£ th√™m {len(result.inserted_ids)} b·∫£n ghi [{loai}] v√†o '{collection_name}'")

    def insert_thuoc(self, db_name: str, limit=100, batch_size=10):
        data = crawl_thuoc_items(limit=limit, batch_size=batch_size)
        self._prepare_and_insert(db_name, data, loai="thuoc")

    def insert_nguyenlieu(self, db_name: str, limit=100, batch_size=10):
        data = crawl_nguyenlieu_items(limit=limit, batch_size=batch_size)
        self._prepare_and_insert(db_name, data, loai="nguyenlieu")

    def insert_taduoc(self, db_name: str, limit=100, batch_size=10):
        data = crawl_taduoc_items(limit=limit, batch_size=batch_size)
        self._prepare_and_insert(db_name, data, loai="taduoc")
    def insert_thuoc_full(self, db_name: str, limit=100, batch_size=10,first_skip=0):
        """
        ‚Ä¢ Crawl thu·ªëc (k√®m nguy√™n li·ªáu) ‚Üí fulltext + embedding
        ‚Ä¢ Th√™m v√†o collection m·∫∑c ƒë·ªãnh
        ‚Ä¢ G·ªçi LLM l·∫•y c√¥ng d·ª•ng, l∆∞u v√†o COLLECTION_THUOC_CONGDUNG
        """
        items = crawl_thuoc_detail_items(limit=limit, batch_size=batch_size,first_skip=first_skip)
        # insert thu·ªëc + embedding
        self._prepare_and_insert(db_name, items, loai="thuoc")

        # l∆∞u c√¥ng d·ª•ng v√†o collection ri√™ng
        for it in items:
            ten = it.get("tenThuoc")
            if ten:
                insert_congdung(self, db_name, ten)


# Kh·ªüi t·∫°o LLM
model_gemini = LiteLLMModel(model_id="gemini/gemini-2.0-flash-exp",
                     api_key=GEMINI_API_KEY)
agent = CodeAgent(model=model_gemini, tools=[DuckDuckGoSearchTool()])

def fetch_congdung(ten_thuoc: str) -> str | None:
    """H·ªèi LLM, tr·∫£ v·ªÅ c√¥ng d·ª•ng ng·∫Øn g·ªçn"""
    q = f"C√¥ng d·ª•ng c·ªßa thu·ªëc {ten_thuoc} l√† g√¨? Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát. N·∫øu th√¥ng tin v·ªÅ c√¥ng d·ª•ng thu·ªëc c√≥ t√™n kh√¥ng ch√≠nh x√°c, h√£y tr·∫£ l·ªùi l√† 'Kh√¥ng c√≥ th√¥ng tin v·ªÅ c√¥ng d·ª•ng c·ªßa thu·ªëc {ten_thuoc}'."
    try:
        answer = agent.run(q)
        return answer.strip()
    except Exception as e:
        print("‚ùå L·ªói truy v·∫•n c√¥ng d·ª•ng:", e)
        return None

def insert_congdung(db: MongoDB, db_name: str, ten_thuoc: str):
    txt = fetch_congdung(ten_thuoc)
    if not txt:
        return
    vec = db.model_embedding.encode(txt).tolist()
    doc = {"congdung": txt, "embedding": vec}
    col = db.get_collection(db_name, COLLECTION_THUOC_CONGDUNG)
    col.insert_one(doc)
    print(f"‚úÖ ƒê√£ l∆∞u c√¥ng d·ª•ng '{ten_thuoc}'")
